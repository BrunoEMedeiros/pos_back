version: '3.4'
services:
  db:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: database
    ports:
      - "5432:5432"
    networks:
      rede1:
        ipv4_address: 172.17.0.3
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U root -d database'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s
  cache:
    container_name: redis
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    networks:
      rede1:
        ipv4_address: 172.17.0.6
    volumes:
      - cache:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    networks:
      rede1:
        ipv4_address: 172.17.0.4
    depends_on:
      - db
  api:
    container_name: api_gateway
    image: d3adsec/api_gateway
    ports:
      - "8000:8000"
    networks:
      rede1:
        ipv4_address: 172.17.0.5
    depends_on:
      db:
        condition: service_started
      cache:
        condition: service_healthy
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      rede1:
        ipv4_address: 172.17.0.10
    volumes:
      - /docker_conf/rabbitmq/data/:/var/lib/rabbitmq/

volumes:
  db:
    driver: local
  cache:
    driver: local
